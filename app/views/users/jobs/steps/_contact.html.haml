#step-contact{ 'ng-controller' => 'ContactController', 'ng-init' => "init({states: #{states_json}, location: #{@location.to_json}, contact: #{@contact.to_json}})", 'ng-show' => 'stepVisible("contact")', 'ng-form' => 'contact_form' }
  = render 'users/jobs/steps/loading'

  %div{ 'ng-hide' => 'loading' }
    = render 'users/jobs/steps/loading_error'

    %div{ 'ng-hide' => 'error' }
      %h5 WHERE SHOULD THE MECHANIC GO?
      %hr.hr-dark-gray
      .wizard-body
        = simple_fields_for :location do |l|
          .row
            .form-group.col-md-9{ 'ng-class' => "inputClass(contact_form['location[address]'])" }
              = l.input :address, label: 'Street address', wrapper: false, input_html: { 'ng-model' => 'location.address', 'required' => true, 'ng-focus' => true }
              %span.help-block{ 'ng-show' => "inputInvalid(contact_form['location[address]'])" }
                street address invalid
          .row
            .form-group.col-md-3{ 'ng-class' => "inputClass(contact_form['location[suburb]'])" }
              = l.input :suburb, wrapper: false, input_html: { class: 'sfTypeahead', 'ng-model' => 'suburb', 'required' => true, 'ng-focus' => true, options: 'completeOptions', datasets: 'completeDatasets' }
              %span.help-block{ 'ng-show' => "inputInvalid(contact_form['location[suburb]'])" }
                suburb invalid

            .form-group.col-md-3{ 'ng-class' => "inputClass(contact_form['location[postcode]'])" }
              = l.input :postcode, wrapper: false, input_html: { 'ng-model' => 'location.postcode', 'ng-pattern' => 'postcode_regex', 'required' => true, 'ng-focus' => true }
              %span.help-block{ 'ng-show' => "inputInvalid(contact_form['location[postcode]'])" }
                postcode invalid

            .form-group.col-md-3{ 'ng-class' => "inputClass(contact_form['location[state_id]'])" }
              = l.input :state_id, as: :select, include_blank: '-- Please select --', wrapper: false, input_html: { class: 'input-sm', 'ng-options' => 's as s.name for s in states', 'ng-model' => 'state', 'required' => true, 'ng-focus' => true }
              %span.help-block{ 'ng-show' => "inputInvalid(contact_form['location[state_id]'])" }
                please select

          %h5 TELL US WHERE WE CAN SEND YOU THE QUOTE
          %hr.hr-dark-gray
          .row
            .form-group.col-md-9{ 'ng-class' => "inputClass(contact_form['job[contact_email]'])" }
              = f.input :contact_email, as: :email, label: 'Where do we send your quote? (We will never spam)', placeholder: 'Please enter email', wrapper: false, input_html: { 'ng-model' => 'job.contact_email', 'ng-focus' => true, 'required' => true }
              %span.help-block{ 'ng-show' => "inputInvalid(contact_form['job[contact_email]'])" }
                email invalid

          .row
            .form-group.col-md-9{ 'ng-class' => "inputClass(contact_form['job[contact_phone]'])" }
              = f.input :contact_phone, label: 'We might have follow-up questions about your quote. What is your mobile number we can reach you on?', placeholder: 'e.g 0410 123 456', wrapper: false, input_html: { 'ng-model' => 'job.contact_phone', 'ng-pattern' => 'phone_regex', 'ng-focus' => true, 'required' => true }
              %span.help-block{ 'ng-show' => "inputInvalid(contact_form['job[contact_phone]'])" }
                phone number invalid

        %hr
        %button.btn.btn-default{ 'type' => 'button', 'ng-click' => 'gotoStep("diagnose")' }
          %small &lt;
          Back
        %button.btn.btn-primary.pull-right{ 'type' => 'button', 'ng-click' => 'submit()', 'ng-disabled' => '!valid()' }
          Continue
          %small &gt;
